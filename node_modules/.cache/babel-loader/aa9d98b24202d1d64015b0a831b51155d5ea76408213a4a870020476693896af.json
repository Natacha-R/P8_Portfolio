{"ast":null,"code":"var _jsxFileName = \"/Users/natacharippert/Desktop/P8_Portfolio/src/components/Collapse.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\"; // Importation de la bibliothèque React, HOOK qui permet de gérer l'état du composant fonctionnel (si le composant est ouvert ou fermé).\n\n// composant collapse \"A Propos\" & \"logements\" avec trois PROPS, title (titre du collapse) className (donner du style) et children (contenu à afficher lorsque le composant est ouvert) :\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Collapse = ({\n  title,\n  className,\n  children\n}) => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  // isOpen : variable qui représente si le contenu est ouvert ou fermé. setIsOpen : fonction qui permet de changer d'etat. useState(false) : signifie que le composant est fermé au départ.\n  const toggleCollapse = () => {\n    // toggleCollapse : fonction qui inverse la valeur de isOpen à chaque appel.\n    setIsOpen(!isOpen); // Si isOpen est false, il devient true (ouvre le contenu) / Si isOpen est true, il devient false (ferme le contenu).\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collapse-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        // icone flèche\n        className: `fas fa-chevron-up chevron-icon ${isOpen ? \"rotated\" : \"\" // si isOpen est true alors classe rotated ajoutée, sinon la classe n'est pas ajoutée.\n        }`,\n        onClick: toggleCollapse // Lorsque l'utilisateur clique sur l'icône, cela appelle la fonction toggleCollapse pour ouvrir ou fermer la section.\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collapse-content\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this) // expression conditionnelle. Si isOpen est true, la partie après && sera rendue dans le DOM.\n  ; // Children : prop spécial qui représente le contenu qui est passé entre les balises du composant parent.\n};\n_s(Collapse, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = Collapse;\nexport default Collapse; // composant Collapse est exporté par défaut (permet à d'autres fichiers de l'importer et de l'utiliser).\nvar _c;\n$RefreshReg$(_c, \"Collapse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Collapse","title","className","children","_s","isOpen","setIsOpen","toggleCollapse","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/natacharippert/Desktop/P8_Portfolio/src/components/Collapse.jsx"],"sourcesContent":["import React, { useState } from \"react\"; // Importation de la bibliothèque React, HOOK qui permet de gérer l'état du composant fonctionnel (si le composant est ouvert ou fermé).\n\n// composant collapse \"A Propos\" & \"logements\" avec trois PROPS, title (titre du collapse) className (donner du style) et children (contenu à afficher lorsque le composant est ouvert) :\n\nconst Collapse = ({ title, className, children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  // isOpen : variable qui représente si le contenu est ouvert ou fermé. setIsOpen : fonction qui permet de changer d'etat. useState(false) : signifie que le composant est fermé au départ.\n  const toggleCollapse = () => {\n    // toggleCollapse : fonction qui inverse la valeur de isOpen à chaque appel.\n    setIsOpen(!isOpen); // Si isOpen est false, il devient true (ouvre le contenu) / Si isOpen est true, il devient false (ferme le contenu).\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"collapse-header\">\n        <h2>{title}</h2>\n        <i // icone flèche\n          className={`fas fa-chevron-up chevron-icon ${\n            isOpen ? \"rotated\" : \"\" // si isOpen est true alors classe rotated ajoutée, sinon la classe n'est pas ajoutée.\n          }`}\n          onClick={toggleCollapse} // Lorsque l'utilisateur clique sur l'icône, cela appelle la fonction toggleCollapse pour ouvrir ou fermer la section.\n        ></i>\n      </div>\n      {isOpen && <div className=\"collapse-content\">{children}</div>}\n    </div> // expression conditionnelle. Si isOpen est true, la partie après && sera rendue dans le DOM.\n  ); // Children : prop spécial qui représente le contenu qui est passé entre les balises du composant parent.\n};\n\nexport default Collapse; // composant Collapse est exporté par défaut (permet à d'autres fichiers de l'importer et de l'utiliser).\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO,CAAC,CAAC;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,SAAS;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC3C;EACA,MAAMU,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACAD,SAAS,CAAC,CAACD,MAAM,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,oBACEN,OAAA;IAAKG,SAAS,EAAEA,SAAU;IAAAC,QAAA,gBACxBJ,OAAA;MAAKG,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BJ,OAAA;QAAAI,QAAA,EAAKF;MAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChBZ,OAAA;QAAG;QACDG,SAAS,EAAE,kCACTG,MAAM,GAAG,SAAS,GAAG,EAAE,CAAC;QAAA,EACvB;QACHO,OAAO,EAAEL,cAAe,CAAC;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EACLN,MAAM,iBAAIN,OAAA;MAAKG,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAEA;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC,CAAC;EAAA,CACP,CAAC;AACL,CAAC;AAACP,EAAA,CAtBIJ,QAAQ;AAAAa,EAAA,GAARb,QAAQ;AAwBd,eAAeA,QAAQ,CAAC,CAAC;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}